configfile: "./config.yaml"

# define the directories to be created (.mkdir_placeholder) simply serves
# to trick snakemake into making the creating of directories its own job
dirs = [f"bp_graph{bp}/.mkdir_placeholder" for bp in config["mapping_params"]["base_pairing"]]

rule all:
    input:
        dirs,  # create all the necessary directories
        expand("bp_graph{base_pairing}/phenotype_robustness_freq.pdf", 
               base_pairing=config["mapping_params"]["base_pairing"]),
        expand("bp_graph{base_pairing}/phenotype_distribution.pdf", 
               base_pairing=config["mapping_params"]["base_pairing"]),
        "phenotype_robustness_freq.pdf"

rule create_subdirectories:
    priority: 1
    output:
        temp("{path}/.mkdir_placeholder")  # this file will be deleted when all jobs are done
    shell:
        "mkdir -p {wildcards.path} && "  # create directory
        "touch {output}"  # make file (only to satisfy condition)

rule generate_genotype_space:
    output:
        "genotypes.txt"
    params:
        alphabet=config["alphabet"],
        seq_len=config["sequence_lengths"]
    shell:
        "build_genotype_space.py " 
        "-a {params.alphabet} "
        "-l {params.seq_len} "
        "-o {output}"

rule mfe_gp_map:
    input:
        "genotypes.txt"
    output:
        "bp_graph{base_pairing}/gp_map.txt"
    params:
        graph_path=config["graph_path"],
        min_loop_size=config["mapping_params"]["min_loop_size"],
        suboptimal=config["mapping_params"]["suboptimal"],
        structures_max=config["mapping_params"]["structures_max"],
        alphabet=config["alphabet"],
        base_pair=config["mfe_params"]["base_pair"],
        deterministic=config["mfe_params"]["deterministic"]
    shell:
        "nussinov_mfe_gp_mapping.py "
        "-i {input} "
        "-o {output} "
        "-m {params.min_loop_size} "
        "-s {params.suboptimal} "
        "-z {params.structures_max} "
        "-g {params.graph_path} "
        "-a {params.alphabet} "
        "-p {wildcards.base_pairing} "
        "-b {params.base_pair} "
        "{params.deterministic} "

# Concats all gp maps, extracts all phenotypes and creates a unique list
# The position in this list will define the id of each phenotype for the rest
# of the snakemake pipeline.
rule extract_phenotype_list:
    input:
        expand("bp_graph{base_pairing}/gp_map.txt", 
                base_pairing=config["mapping_params"]["base_pairing"])
    output:
        "phenotypes.txt"
    shell:
        "cat {input} > tmp_phenotypes && " 
        "awk '{{print $1}}' {input} | sort | uniq > {output} && "
        "rm tmp_phenotypes"


rule compute_robustness:
    input:
        gp_map="{graph_dir}/gp_map.txt",
        genotypes="genotypes.txt"
    output:
        "{graph_dir}/phenotype_robustness.txt"
    params:
        alphabet=config["alphabet"]
    shell:
        "compute_robustness.py "
        "-f {input.gp_map} "
        "-g {input.genotypes} "
        "-a {params.alphabet} "
        "-o {output}"

rule compute_phenotype_distribution:
    input:
        "{graph_dir}/gp_map.txt"
    output:
        "{graph_dir}/phenotype_distribution.txt"
    shell:
        "compute_phenotype_distribution.py "
        "-f {input} "
        "-o {output} "

rule plot_robustness_over_freq_single:
    input:
        ph_distr="bp_graph{base_pairing}/phenotype_distribution.txt",
        ph_rob="bp_graph{base_pairing}/phenotype_robustness.txt"
    output:
        "bp_graph{base_pairing}/phenotype_robustness_freq.pdf"
    shell:
        "plot_robustness_phenotype_freq.py "
        "-d {input.ph_distr} "
        "-r {input.ph_rob} "
        "-l {wildcards.base_pairing} "
        "-o {output} "

rule plot_robustness_over_freq_all:
    input:
        ph_distr=expand("bp_graph{bp}/phenotype_distribution.txt", bp=config["mapping_params"]["base_pairing"]),
        ph_rob=expand("bp_graph{bp}/phenotype_robustness.txt", bp=config["mapping_params"]["base_pairing"])
    output:
        "phenotype_robustness_freq.pdf"
    params:
        # have to join the inputs as a comma-separated to be recognized as one
        # argument by the shell script. argparse then processes the list (see 
        # script).
        bp_label=",".join([str(bp) for bp in config["mapping_params"]["base_pairing"]]),
        ph_distr=",".join(expand("bp_graph{bp}/phenotype_distribution.txt", bp=config["mapping_params"]["base_pairing"])),
        ph_rob=",".join(expand("bp_graph{bp}/phenotype_robustness.txt", bp=config["mapping_params"]["base_pairing"]))
    shell:
        "plot_robustness_phenotype_freq.py "
        "-d {params.ph_distr} "
        "-r {params.ph_rob} "
        "-l {params.bp_label} "
        "-o {output} "

rule plot_phenotype_distribution:
    input:
        ph_distr="{graph_dir}/phenotype_distribution.txt",
    output:
        "{graph_dir}/phenotype_distribution.pdf"
    shell:
        "plot_phenotype_distribution.py "
        "-d {input.ph_distr} "
        "-o {output} "

# rule get_canonical_reference:
